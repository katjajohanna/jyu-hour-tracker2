service:
  name: hour-tracker-v2

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  environment:
    DYNAMODB_TABLE_USERS: Users-${self:provider.stage}-${self:service.name}
    DYNAMODB_TABLE_USERS_ARN: arn:aws:dynamodb:${self:provider.region}:423343990083:table/Users-${self:provider.stage}-${self:service.name}
    DYNAMODB_TABLE_HOURS: Hours-${self:provider.stage}-${self:service.name}
    DYNAMODB_TABLE_HOURS_ARN: arn:aws:dynamodb:${self:provider.region}:423343990083:table/Hours-${self:provider.stage}-${self:service.name}
    SNS_ALARM_TOPIC_NAME: alarmTopic-${self:provider.stage}-${self:service.name}
    SNS_ALARM_TOPIC_ARN: arn:aws:sns:${self:provider.region}:423343990083:alarmTopic-${self:provider.stage}-${self:service.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '${self:provider.environment.DYNAMODB_TABLE_USERS_ARN}'
        - '${self:provider.environment.DYNAMODB_TABLE_USERS_ARN}/index/*'
        - '${self:provider.environment.DYNAMODB_TABLE_HOURS_ARN}'
        - '${self:provider.environment.DYNAMODB_TABLE_HOURS_ARN}/index/*'

functions:
  getUsers:
    handler: users/handler.handler
    events:
      - http:
          path: /users
          method: GET
          cors: true

  getHours:
    handler: hours/get-handler.handler
    events:
      - http:
          path: /hours
          method: GET
          cors: true

  getHour:
    handler: hours/get-one-handler.handler
    events:
      - http:
          path: /hours/{id}
          method: GET
          cors: true

  saveHour:
    handler: hours/post-handler.handler
    events:
      - http:
          path: /hours/
          method: POST
          cors: true

  updateHour:
    handler: hours/put-handler.handler
    events:
      - http:
          path: /hours/{id}
          method: PUT
          cors: true

  deleteHour:
    handler: hours/delete-handler.handler
    events:
      - http:
          path: /hours/{id}
          method: DELETE
          cors: true

  handleAlarm:
    handler: alarms/handler.handler
    events:
      - sns:
          arn: ${self:provider.environment.SNS_ALARM_TOPIC_ARN}
          topicName: ${self:provider.environment.SNS_ALARM_TOPIC_NAME}

resources:
  Resources:
    Users:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: Users-${self:provider.stage}-${self:service.name}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: "S"
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Hours:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: Hours-${self:provider.stage}-${self:service.name}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: "S"
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Topic for CloudWatch alarms
        TopicName: ${self:provider.environment.SNS_ALARM_TOPIC_NAME}

plugins:
  - serverless-plugin-aws-alerts

custom:
  alerts:
    dashboards: true
    topics:
      ok:
        topic: ${self:provider.environment.SNS_ALARM_TOPIC_ARN}
      alarm:
        topic: ${self:provider.environment.SNS_ALARM_TOPIC_ARN}
    definitions:
      functionDuration:
        description: 'Duration'
        namespace: 'AWS/Lambda'
        metric: Duration
        statistic: Maximum
        period: 60
        threshold: 150
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching

    alarms:
      - functionDuration